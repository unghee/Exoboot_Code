# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Message_pb2 as Message__pb2


class GuiAlgorithmStub(object):
    """This service is between
    GUI: Running on the Surface Tablet {Client}
    and
    Algorithm: Running on the computer {Server}
    DESCRIPTION:
    The GUI will send the user input {i.e int32 LIKE(1), DISLIKE(-1) or SKIP(0)} and will receive a
    NULL message indicating new control parameters are generated -> new torque values
    are given to the motor by the RL Algorithm
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UserInput = channel.unary_unary(
                '/GuiAlgorithm/UserInput',
                request_serializer=Message__pb2.GuiInput.SerializeToString,
                response_deserializer=Message__pb2.Null.FromString,
                )


class GuiAlgorithmServicer(object):
    """This service is between
    GUI: Running on the Surface Tablet {Client}
    and
    Algorithm: Running on the computer {Server}
    DESCRIPTION:
    The GUI will send the user input {i.e int32 LIKE(1), DISLIKE(-1) or SKIP(0)} and will receive a
    NULL message indicating new control parameters are generated -> new torque values
    are given to the motor by the RL Algorithm
    """

    def UserInput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GuiAlgorithmServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UserInput': grpc.unary_unary_rpc_method_handler(
                    servicer.UserInput,
                    request_deserializer=Message__pb2.GuiInput.FromString,
                    response_serializer=Message__pb2.Null.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GuiAlgorithm', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GuiAlgorithm(object):
    """This service is between
    GUI: Running on the Surface Tablet {Client}
    and
    Algorithm: Running on the computer {Server}
    DESCRIPTION:
    The GUI will send the user input {i.e int32 LIKE(1), DISLIKE(-1) or SKIP(0)} and will receive a
    NULL message indicating new control parameters are generated -> new torque values
    are given to the motor by the RL Algorithm
    """

    @staticmethod
    def UserInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GuiAlgorithm/UserInput',
            Message__pb2.GuiInput.SerializeToString,
            Message__pb2.Null.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AskingforPreferenceStub(object):
    """This service is between
    Algorithm: Running on the computer {Client}
    and
    GUI: Running on the Surface Tablet {Server}
    DESCRIPTION:
    The Algorithm will send commands to the GUI after "X" number of strides (X is a hyperparameter which has to be tuned)
    to ask user's fro preference. 
    THe reason for this is because we want to do continous updates based on numeric rewards like every "Y" strides and only ask for
    user preference after certain number of steps. Getting user preference is costly, so we want to continuauly learn based on numeric reward functions and 
    use user preference for torque profile tuning on a high level

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PreferenceUpdateStep = channel.unary_unary(
                '/AskingforPreference/PreferenceUpdateStep',
                request_serializer=Message__pb2.PreferenceFlag.SerializeToString,
                response_deserializer=Message__pb2.Null.FromString,
                )


class AskingforPreferenceServicer(object):
    """This service is between
    Algorithm: Running on the computer {Client}
    and
    GUI: Running on the Surface Tablet {Server}
    DESCRIPTION:
    The Algorithm will send commands to the GUI after "X" number of strides (X is a hyperparameter which has to be tuned)
    to ask user's fro preference. 
    THe reason for this is because we want to do continous updates based on numeric rewards like every "Y" strides and only ask for
    user preference after certain number of steps. Getting user preference is costly, so we want to continuauly learn based on numeric reward functions and 
    use user preference for torque profile tuning on a high level

    """

    def PreferenceUpdateStep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AskingforPreferenceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PreferenceUpdateStep': grpc.unary_unary_rpc_method_handler(
                    servicer.PreferenceUpdateStep,
                    request_deserializer=Message__pb2.PreferenceFlag.FromString,
                    response_serializer=Message__pb2.Null.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AskingforPreference', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AskingforPreference(object):
    """This service is between
    Algorithm: Running on the computer {Client}
    and
    GUI: Running on the Surface Tablet {Server}
    DESCRIPTION:
    The Algorithm will send commands to the GUI after "X" number of strides (X is a hyperparameter which has to be tuned)
    to ask user's fro preference. 
    THe reason for this is because we want to do continous updates based on numeric rewards like every "Y" strides and only ask for
    user preference after certain number of steps. Getting user preference is costly, so we want to continuauly learn based on numeric reward functions and 
    use user preference for torque profile tuning on a high level

    """

    @staticmethod
    def PreferenceUpdateStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AskingforPreference/PreferenceUpdateStep',
            Message__pb2.PreferenceFlag.SerializeToString,
            Message__pb2.Null.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ControllerAlgorithmStub(object):
    """
    message PreferenceValue{
    EnumPreference enumpreference = 1;
    }

    This service is between
    Lowlevel controlller: Running on the Rpi {Client}
    and
    Algorithm: Running on the computer {Server}
    DESCRIPTION:

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ControllerMessage = channel.unary_unary(
                '/ControllerAlgorithm/ControllerMessage',
                request_serializer=Message__pb2.ControllerPing.SerializeToString,
                response_deserializer=Message__pb2.Null.FromString,
                )


class ControllerAlgorithmServicer(object):
    """
    message PreferenceValue{
    EnumPreference enumpreference = 1;
    }

    This service is between
    Lowlevel controlller: Running on the Rpi {Client}
    and
    Algorithm: Running on the computer {Server}
    DESCRIPTION:

    """

    def ControllerMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControllerAlgorithmServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ControllerMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ControllerMessage,
                    request_deserializer=Message__pb2.ControllerPing.FromString,
                    response_serializer=Message__pb2.Null.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ControllerAlgorithm', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ControllerAlgorithm(object):
    """
    message PreferenceValue{
    EnumPreference enumpreference = 1;
    }

    This service is between
    Lowlevel controlller: Running on the Rpi {Client}
    and
    Algorithm: Running on the computer {Server}
    DESCRIPTION:

    """

    @staticmethod
    def ControllerMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerAlgorithm/ControllerMessage',
            Message__pb2.ControllerPing.SerializeToString,
            Message__pb2.Null.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ActionStateStub(object):
    """This service is between
    Algorithm: Running on the computer {Client}
    Lowlevel controlller: Running on the Rpi {Server}
    DESCRIPTION:

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ActionMessage = channel.unary_unary(
                '/ActionState/ActionMessage',
                request_serializer=Message__pb2.SendingAction.SerializeToString,
                response_deserializer=Message__pb2.Null.FromString,
                )


class ActionStateServicer(object):
    """This service is between
    Algorithm: Running on the computer {Client}
    Lowlevel controlller: Running on the Rpi {Server}
    DESCRIPTION:

    """

    def ActionMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ActionStateServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ActionMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ActionMessage,
                    request_deserializer=Message__pb2.SendingAction.FromString,
                    response_serializer=Message__pb2.Null.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ActionState', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ActionState(object):
    """This service is between
    Algorithm: Running on the computer {Client}
    Lowlevel controlller: Running on the Rpi {Server}
    DESCRIPTION:

    """

    @staticmethod
    def ActionMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ActionState/ActionMessage',
            Message__pb2.SendingAction.SerializeToString,
            Message__pb2.Null.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
